Clonar um repositótio da nuvem localmente
	- git close (url)
	- git clone -branch new_feature <repositorio>
	- git clone <repositorio> <meu-projeto-clone>
Saber as alterações que ocorreram no projeto
	 - git log
	 - git log --oneline (traz um resumo de todas as alterações)
	 - git log -p (mais informações/ linha a linha alterada)
	 - git log --author="user_name" (pesquisa log por autor)
	 - git log --since=1.month.ago --until=1.day.ago (pesquisa log por data)
	 - git log --graph (para ter os commits en grafos)
(site que tem comandos de logs: https://devhints.io/git-log)

Atualizar os fontes local
	- git pull

Ver as files modificadas
	- git status

Commit
	- git commit (file ou . para todo mundo) -m "mensagem que eu quero"

Publicar os commits locais
	- git push origin (branch)



DIFF - alterações que foram feitas entre commits

Voltar para tal versão 
	- git restore --source (hash do commit) (apenas de tal file ou .)

Adicionar nova file
	- git add (nome da file ou .)

Branch:
	git checkout -n "nome da branch"

Voltar para o main:
	git switch main

Dar merge:
	git merge "nome do branch que da o merge"	

Lista todos os branchs:
	git branch

Remove files from the working tree and from the index
	git rm

Lista a árvore do diretorio 
	tree .git 
-> da pra ter o flashback de todos os commits

Pra sair daquela tela travadona:
	-> shift + q

Ir pro branch que quero
	git checkout -b "nome do branch"

Ver a árvore
	gitk --all

criar um repositorio:
	- git init
	- git init --bare (quando a pasta só vai conter as alterações do arquivo, não ele em si)

ver o estado atual do repositorio:
	- git status


Ver as configurações do git para a máquina:
	- git config --global/--local


Ignorando arquivos:
	- cria uma file chamada ".gitignore" e dentro dela coloca todos os arquivos a serem ignorados

Adicionando repositorios remotos:
	- git remote add local "caminho"
	- git remote -v (lista os locais para pegar e guardar os arquivos)


Unir commit(atualizar) sem dar merge:
	- git rebase "nome da brach"









